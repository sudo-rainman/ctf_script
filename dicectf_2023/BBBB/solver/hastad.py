from sage.all import *
from Crypto.Util.number import *
import itertools

def small_roots(f, bounds, m=1, d=None):
	if not d:
		d = f.degree()

	R = f.base_ring()
	N = R.cardinality()
	
	f /= f.coefficients().pop(0)
	f = f.change_ring(ZZ)

	G = Sequence([], f.parent())
	for i in range(m+1):
		base = N**(m-i) * f**i
		for shifts in itertools.product(range(d), repeat=f.nvariables()):
			g = base * prod(map(power, f.variables(), shifts))
			G.append(g)

	B, monomials = G.coefficient_matrix()
	monomials = vector(monomials)

	factors = [monomial(*bounds) for monomial in monomials]
	for i, factor in enumerate(factors):
		B.rescale_col(i, factor)

	B = B.dense_matrix().LLL()

	B = B.change_ring(QQ)
	for i, factor in enumerate(factors):
		B.rescale_col(i, 1/factor)

	H = Sequence([], f.parent().change_ring(QQ))
	for h in filter(None, B*monomials):
		H.append(h)
		I = H.ideal()
		if I.dimension() == -1:
			H.pop()
		elif I.dimension() == 0:
			roots = []
			for root in I.variety(ring=ZZ):
				root = tuple(R(root[var]) for var in f.variables())
				roots.append(root)
			return roots

	return []

def linear_padding(ciphertexts, moduli, const_array=(), eps=1/8):
    
    T_array = [Integer(0)]*3
    crt_array = [Integer(0)]*3
    polynomial_array = []

    for i in range(3):
        crt_array = [0]*3
        crt_array[i] = 1
        T_array[i] = Integer(crt(crt_array,moduli))

    x = PolynomialRing(Zmod(prod(moduli)),1,"x").gens()[0]
    for i in range(3):
        polynomial_array += [T_array[i]*(  (x*2**(16*8)+ const_array[i])**11 - Integer(ciphertexts[i]))] #Representation of polynomial f(x) = (A*x + b) ** e - C where (A*x + b) is the padding polynomial

    g = sum(polynomial_array)
    N = prod(moduli)
    # roots = g.small_roots(X=2*(8*x_byte_length),epsilon=eps)
 
    # roots = g.small_roots(epsilon=1/25)
    # print(roots)
    
    roots = small_roots(g,[2**(8*54)],m=4)
    print(roots)
    return roots[0][0] if len(roots) >= 1 else -1

n1=11984916984511856190143172044750718907035427516099134614128028131941072047044280510618543230274689408118021517813095852690914129906267018130684770210517356536931610236516936844687103135335654218286590788906443822421846169781858952869411818071738707323116507866239120833536431050383013333450676043147155622233378130515099230677364905617365875826483460639677354480171103514128646635009409525972539500854937260043998085827016210938294100990569121716030724040165933977378768957550249885410295375689126454836286867612516910890525116100262496267406983228892114342980150706175753854789269998654434366896346968140457619339387
   
e=11
r1=int('09ab3ec2c558d72be1ac830f81d85bd5',16)
c1=7823185936959737103128131711479790938646813289050301537257520885443825667342675761143028219382407803526825955321938328642038326427528177755029801858595060545040819872873277903658528047419041501695579048968026493475324500365814115086028798103038075030680501018256490248927798106476445634556815410558055568742024280303720502939992616988067237995833024062891308269301991740365744198801082918240508805728311973396223394610689164585093559236020415974788913571147784056663828061656467162326273772277813971523602972608083582299332966473618540179470351232569492162788321587017069870293641825071657615464666242088044642661057
    
n2=24748712013278633030427502605253553632574343587387467974097779532702912716823058743567401556164897209777393086276947513839528693249737542765336419302685004465464508580613507132807209688646218023565657072577297043880081777947778737232190487201198780278415812277596155818890843796527671275323949424103432879484246913912039013485921268081435926531093747491914238911160622314474823735727863911629968685618631608777977817989712663475651017763616995485969842577032109157734744463667748855111924301784982516513628732969388466631651859924137778389307421916101869036343081400126417180832988523937231538083309776651846844529599
    
r2=int('ccf5ae007268d72f2db0596d84024195',16)
c2=535843404418396630189160808449767595469501486763314274314255838398823829046966342989046485837325985668747320278032715277525352475437705806842729568748202889236055238678899019341436101062853756256206195476322388302622861234288922071415044981685663311708185623387718970483459419685935346780811479763125910622775969241619397262383493848313057742249982860661712248629491092506777398707481537728809578798680331131757775350355906352889935330146152744076128163811069460963185454734996355998478282685933876446237621918669885664678014909366572261053076236514247743594076875349397489523121994968298744250792112984399447410463
    
n3=19290426965940898980099079789977320350701577520619349341950485415023160781015394832999201161552839250271474307502223362331196870678740592489346341430602510301833976149394613041362039244542763329203708331113238632044826870590557554433139101617687185162437487875447676408556944043106419134927065834404376594837243227833817438791199924993829429485142632448546420735807073118458499510686858372721268959995035071309096788797695267857202512592508108499310751411530597999298523713804308208797034638529715574212524279598475341028102898897633753155486448902098905061769171064795337740011596821126044939895012246450159197560027
   
r3=int('deaf038519f0c1e21bc08c2ca0a4f336',16)
c3=13179787800155657286718516800676625019735017021063691174257450499174629287671545168646453294739524446637728729770954141563006306853750218203429678005634519094150158241943895230922956964129387080904093389345550665187248271651900335763066767190665376976209594295306016740156198347052610089321174789726441220375619792345786936362334557770176202017309349954333010696981506098534170772355990817594074645042824984340867047183913951020495539954360509868240372797417441959394451082664175000610526422964415384666470568040548979920914421648409201970532204852108442888544583441926080054082038037187153003777212925825921697054813

samples = [[n1,e,r1,c1],[n2,e,r2,c2],[n3,e,r3,c3]]

const_array = [i[2] for i in samples]
ct = [i[3] for i in samples]
moduli = [i[0] for i in samples]



######take very long to calculate

print(long_to_bytes(linear_padding(ct,moduli,const_array)))

print(long_to_bytes(259288030153405257493967854835263715034724405989699924495355125133766969843598484032185086784424133745296649598386935326597))
#dice{r3s0rt_t0_LCG_4ft3r_f41l1ng_t0_m4k3_ch4ll}\xdc2g\x85
